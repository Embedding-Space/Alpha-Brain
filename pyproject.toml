[project]
name = "alpha-brain"
version = "1.0.0"
description = "Unified memory and knowledge system for AI agents with natural language interface"
readme = "README.md"
authors = [
    { name = "Jeffery Harrell", email = "jefferyharrell@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "fastmcp>=1.0.0",
    "sentence-transformers>=3.0.0",
    "numpy>=2.0.0",
    "sqlalchemy>=2.0.0",
    "pgvector>=0.3.0",
    "psycopg[binary]>=3.1.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    "pendulum>=3.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pydantic-ai>=0.0.9",
    "httpx>=0.25.0",
    "structlog>=24.0.0",
    "jinja2>=3.1.0",
    "cyclopts>=3.0.0",
    "rich>=13.0.0",
    "fastapi>=0.116.1",
    "greenlet>=3.2.3",
    "redis>=6.2.0",
]

[project.scripts]
alpha-brain = "alpha_brain.cli:main"

[dependency-groups]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.6.0",
    "vulture>=2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/alpha_brain"]

[tool.hatch.build]
sources = ["src"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
# Run tests in order (important for E2E)
addopts = "-v"

[tool.ruff]
# Target Python 3.13
target-version = "py313"

# Same line length as Black
line-length = 88

# Fix violations automatically
fix = true

[tool.ruff.lint]
# Enable these rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]

# Ignore these specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value comparison
    "SIM108",  # Use ternary operator (sometimes less readable)
    "T201",    # print() found (we use structlog but might need print for debugging)
    "T203",    # pprint() found
    "PLW0603", # Using global for singletons is fine
    "PLC0415", # Import at top level - we need lazy imports in lifespan
    "A002",    # Argument name shadowing builtin - 'input' is descriptive
    "W293",    # Blank line with whitespace - in docstrings
    "W291",    # Trailing whitespace - in SQL strings
    "SIM117",  # Nested with statements - clearer for DB operations
]

# Allow these names even though they're usually bad
# (Removed allowed-confusables - was causing parsing issues)

[tool.ruff.lint.per-file-ignores]
# Tests can have more relaxed rules
"tests/**/*.py" = [
    "S101",   # Use of assert detected
    "PLR2004", # Magic value comparison
    "S105",   # Possible hardcoded password
]

[tool.ruff.lint.isort]
# Use Google-style import grouping
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = ["alpha_brain"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with 4 spaces
indent-style = "space"

# Unix-style line endings
line-ending = "lf"
